<html>
    <head>
    <title>Exam Review</title>
    <style type="text/css">
        input[type=radio]#Green {
             accent-color: green;
         }      
        input[type=radio]#Red {
             accent-color: red;
        }         
        .hide {
            display: none; 
            border:  solid #ccc; 
            width: 300px;
            height: 150px;
        } 
        .container {
            flex-wrap: wrap;
            display: flex;
        }
        .item {
            width: 49%;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }
        .text {
            border: solid #ccc; 
            width: 300px;
            height: 150px;
        } 

        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1.25rem 2.5rem;
            border-bottom: 1px solid #eee;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .part-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1a1a1a;
            position: relative;
            padding-left: 16rem;
            margin-top: 3rem;
        }

        .part-title::after {
            content: '';
            position: absolute;
            bottom: -0.5rem;
            left: 16rem;
            width: 10rem;
            height: 0.25rem;
            background-color: #FF7F50;
        }

        .nav-menu {
            display: flex;
            align-items: center;
            gap: 1.75rem;
            padding-right: 30px;
        }

        .nav-item {
            text-decoration: none;
            color: #1a1a1a;
            font-size: 1.1rem;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .nav-item:hover {
            color: #FF7F50;
        }

        .nav-item.active {
            color: #FF7F50;
        }
        .logo {
            display: flex;
            align-items: center;
            gap: 0.625rem;
            text-decoration: none;
        }

        .logo img {
            height: 2.5rem;
            width: 2.5rem;
        }

        .logo-text {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1a1a1a;
        }
        
        .quiz-container {
            max-width: 800px;
            margin: 30px auto 10px;
            background: #f1e1e1;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
        }
        .test {
            margin-bottom: 20px;
        }
        .audio-player {
            display: flex;
            align-items: center;
            background-color: rgb(248, 248, 248);
            border-radius: 9999px;
            padding: 12px 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            max-width: 600px;
            margin: 20px auto;
        }

        .audio-button {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0;
        }

        .play-pause-btn {
            margin-right: 15px;
        }

        .time-display {
            font-size: 14px;
            color: #666;
            margin-right: 15px;
            min-width: 80px;
        }
        .progress-container {
            flex-grow: 1;
            height: 4px;
            background-color: #e5e7eb;
            border-radius: 2px;
            overflow: hidden;
            margin-right: 15px;
        }

        .progress-bar {
            width: 0%;
            height: 100%;
            background-color: #ff7b5c;
            border-radius: 2px;
        }
        .image-container {
            text-align: center;
            margin-bottom: 10px;
        }
        .image-container img {
            max-width: 100%;
            height: auto;
            border-radius: 5px;
        }
        .zoom-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 10px;
            padding-bottom: 20px;
        }
        .zoom-btn {
            background-color: #ffffff;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .zoom-btn .zoom-btn-icon {
            width: 24px;
            height: 24px;
            color: #000000; 
        }

        .options {
            display: block;
        }
        .option {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 10px;
            cursor: pointer;
            background-color: #ffffff;
            margin-bottom: 10px;
        }
        .option.green {
            background-color: #d4edda;
            border-color: #28a745;  
        }

        .option.red {
            background-color: #f8d7da; 
            border-color: #dc3545;  
        }

        .option.disabled {
            background-color: #f8f9fa;
            border-color: #ced4da;  
            cursor: not-allowed;
        }
        .option:last-child {
            margin-bottom: 0; 
        }
        /* .option:hover {
            background: #f3b894;
        } */
        .option input[type="radio"] {
            margin: 0;
        }

        .text-column {
            flex: 1;
            text-align: justify;
        }

        .part-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #1a1a1a;
            position: relative;
            padding-left: 16rem;
            margin-top: 3rem;
        }

        .part-title::after {
            content: '';
            position: absolute;
            bottom: -0.5rem;
            left: 16rem;
            width: 10rem;
            height: 0.25rem;
            background-color: #FF7F50;
        }

        .user-profile {
            width: 2.5rem;
            height: 2.5rem;
            border-radius: 50%;
            background-color: #dcdcdc;
            display: flex;
            align-items: center;
            justify-content: center;
        }
     </style> 
    </head>
    <body>
    <header class="header">
        <a href="/" class="logo">
            <img src="/placeholder.svg" alt="EstudyMe Logo">
            <span class="logo-text">EstudyMe</span>
        </a>
        <nav class="nav-menu">
            <a href="/" class="nav-item">Home</a>
            <a href="/exam/list/" class="nav-item">Test exam</a>
            <div class="user-profile">
                <!-- User scritp here -->
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                    <circle cx="12" cy="7" r="4"></circle>
                </svg>
            </div>
        </nav>
    </header>
        <h1>Exam <%=Exam.Examid%> Review</h1>
        <% var skillID = Exam.Skillid%>
        <p></p>
        <% let Parts = Exam.ArrPart %> 
        <% for (const Part of Parts) { %>
            <p id="<%= Part.Partname %>"></p>
            <h2 class="part-title">Part name: <%= Part.Partname %></h2>
            <% var pName = Part.Partname %>

            <% let Tests = Part.ArrTest %>                  

            <% for (var Test of Tests) { %>
                <div class="quiz-container">
                    <div class="test">

                <% if (skillID == 1) { %>
                    <div class="audio-player">
                        <audio id="audio" controls name="audio" style="display: none;">
                            <source src="/audio/<%= Test.Audio %>" type="audio/ogg">
                            Your browser does not support the audio element.
                        </audio>
                        <button id="playPauseBtn" type="button" class="audio-button play-pause-btn">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="#ff7b5c">
                                <path d="M8 5v14l11-7z"/>
                            </svg>
                        </button>
                        <div id="timeDisplay" class="time-display">00:00 / 00:00</div>
                
                        <div id="progressBarContainer" class="progress-container">
                            <div id="progressBar" class="progress-bar"></div>
                        </div>
                        <button id="volumeBtn" type="button" class="audio-button">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="#666">
                                <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02z"/>
                            </svg>
                        </button>
                    </div> 
                        <p></p>
                    <p></p>

                    <% if (pName == "Photographs") { %>
                        <div class="image-container">
                            <img src= "/image/<%= Test.Image %>" alt="https://via.placeholder.com/600x400">
                        </div>
                        <div class="zoom-controls">
                            <button class="zoom-btn">
                                <svg class="zoom-btn-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                                    <circle cx="12" cy="12" r="3"/>
                                </svg>
                            </button>
                            <button class="zoom-btn">
                                <svg class="zoom-btn-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="11" cy="11" r="8"></circle>
                                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                                    <line x1="11" y1="8" x2="11" y2="14"></line>
                                    <line x1="8" y1="11" x2="14" y2="11"></line>
                                </svg>
                            </button>
                            
                            <button class="zoom-btn">
                                <svg class="zoom-btn-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="11" cy="11" r="8"></circle>
                                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                                    <line x1="8" y1="11" x2="14" y2="11"></line>
                                </svg>
                            </button>
                        </div>
                    <% } %>
                <% } %>     <% /** end if */ %>

                
                
                <div class="options">  
                    <% let Questions = Test.ArrQues %>             

                    <% for (var Question of Questions) { %>    
                        Question: <b class="question-order"><%= Question.Orderquestion %>)</b>

                            <% var soq = Question.StrOrderquestion %>
                            <% var sqid = Question.StrQuestionid %>
        
                            <% var result = Question.Result %>
                            <% var answer = Question.Answer %>
                            <% var flag = false %>
                            <% if (Question.Result == Question.Answer) { %>
                                <% flag = true %>                
                            <% } %>
        
                                <% var olet = "" %>
                                <% var olay = "" %>
        
                                <% var Options = Question.ArrOpt %>         

                                <% for (var index=0; index<Options.length; index++) { %>
                                    <% if (index == 0) { olet = "a"} %>
                                    <% if (index == 1) { olet = "b"} %>
                                    <% if (index == 2) { olet = "c"} %>
                                    <% if (index == 3) { olet = "d"} %>                       
        
                                    <% if (flag && olet == result) { %>
                                        <label class="option green">
                                            <input type="radio" name="<%=soq%>" value="<%=Options[index]%>" checked />(<%=olet%>) <%=Options[index]%>
                                        </label>
                                    <% } else { %>
                                        <% if (!flag && olet == answer) { %>
                                            <label class="option red">
                                                <input type="radio" name="<%=soq%>" value="<%=Options[index]%>" checked />(<%=olet%>) <%=Options[index]%>
                                            </label>
                                        <% } else { %>
                                            <label class="option disabled">
                                                <input type="radio" name="<%=soq%>" value="<%=Options[index]%>" disabled />(<%=olet%>) <%=Options[index]%>
                                            </label>
                                        <% } %>
                                    <% } %>         <% /** end if */ %>                                    

                                    <input type="hidden" name="sqid" value="<%=sqid%>"/>  
                                    <p></p>
                                <% } %>         <%/** ArrOpt */ %>                                                                   
                    <% } %>         <% /** ArrQues */ %>
                    </div> 
                </div>
            </div>
            <% } %>  <% /** ArrTest */ %>

        <% } %>     <% /** ArrPart */ %>                        

        <script>
            function toggleIframe(did, bid) {
                var iframe = document.getElementById(did);
                if (iframe.style.display === "block") {
                    iframe.style.display = "none";       
                } else {
                    iframe.style.display = "block";      
                }
                var bt = document.getElementById(bid);
                if (bt.textContent === "Show Script") {
                    bt.textContent = "Hide Script";       
                } else {
                    bt.textContent = "Show Script";     
                }
            }

            
             document.addEventListener('DOMContentLoaded', function () {
            const quizContainers = document.querySelectorAll('.quiz-container');

            quizContainers.forEach((container) => {
                const audioElement = container.querySelector('#audio');
                const playPauseBtn = container.querySelector('#playPauseBtn');
                const timeDisplay = container.querySelector('#timeDisplay');
                const progressBarContainer = container.querySelector('#progressBarContainer');
                const progressBar = container.querySelector('#progressBar');
                const volumeBtn = container.querySelector('#volumeBtn');

                let isDragging = false;

                playPauseBtn.addEventListener('click', (event) => {
                    event.preventDefault();
                    togglePlayPause();
                });

                volumeBtn.addEventListener('click', (event) => {
                    event.preventDefault();
                    toggleMute();
                });

                audioElement.addEventListener('timeupdate', updateProgress);

                progressBarContainer.addEventListener('mousedown', (event) => {
                    isDragging = true;
                    updateAudioTime(event);
                });

                document.addEventListener('mousemove', (event) => {
                    if (isDragging) {
                        updateAudioTime(event);
                    }
                });

                document.addEventListener('mouseup', () => {
                    if (isDragging) {
                        isDragging = false;
                    }
                });

                function togglePlayPause() {
                    if (audioElement.paused) {
                        audioElement.play();
                        playPauseBtn.innerHTML = '<svg width="24" height="24" viewBox="0 0 24 24" fill="#ff7b5c"><path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/></svg>';
                    } else {
                        audioElement.pause();
                        playPauseBtn.innerHTML = '<svg width="24" height="24" viewBox="0 0 24 24" fill="#ff7b5c"><path d="M8 5v14l11-7z"/></svg>';
                    }
                }

                function toggleMute() {
                    audioElement.muted = !audioElement.muted;
                    volumeBtn.innerHTML = audioElement.muted
                        ? '<svg width="24" height="24" viewBox="0 0 24 24" fill="#666"><path d="M3 9v6h4l5 5V4L7 9H3z M16 12l4 4m0-4l-4-4"/></svg>'
                        : '<svg width="24" height="24" viewBox="0 0 24 24" fill="#666"><path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02z"/></svg>';
                }

                function updateProgress() {
                    if (!isDragging) {
                        const currentTime = formatTime(audioElement.currentTime);
                        const duration = formatTime(audioElement.duration || 0);
                        timeDisplay.textContent = `${currentTime} / ${duration}`;

                        const percent = (audioElement.currentTime / audioElement.duration) * 100;
                        progressBar.style.width = `${percent}%`;
                    }
                }

                function updateAudioTime(event) {
                    const rect = progressBarContainer.getBoundingClientRect();
                    const offsetX = event.clientX - rect.left;
                    const percent = Math.min(Math.max(offsetX / rect.width, 0), 1);

                    audioElement.currentTime = percent * audioElement.duration;
                    progressBar.style.width = `${percent * 100}%`;

                    const currentTime = formatTime(audioElement.currentTime);
                    const duration = formatTime(audioElement.duration || 0);
                    timeDisplay.textContent = `${currentTime} / ${duration}`;
                }

                function formatTime(seconds) {
                    const minutes = Math.floor(seconds / 60);
                    const remainingSeconds = Math.floor(seconds % 60);
                    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
                    }
                });
            }); 
        </script>
    </body>    
</html>

